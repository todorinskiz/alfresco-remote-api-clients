plugins {
    id 'java-library'
    id 'maven-publish'
}

group = rootProject.group
version = rootProject.version

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://artifacts.alfresco.com/nexus/content/groups/public/' }

    repositories {
        maven {
            name 'artifactory.xenit.eu'
            url 'https://artifactory.xenit.eu/artifactory/libs-snapshot/'
            credentials {
                username property("eu.xenit.artifactory.username")
                password property("eu.xenit.artifactory.password")
            }
        }
    }
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestImplementation.extendsFrom implementation
    integrationTestRuntimeOnly.extendsFrom runtimeOnly
}

dependencies {
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    api project(':alfresco-webscripts-client:alfresco-webscripts-spi')
    api "eu.xenit.testing.ditto:ditto:${dittoVersion}"

    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    testImplementation "org.assertj:assertj-core:${assertjVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"

    integrationTestImplementation project(':alfresco-webscripts-client:alfresco-webscripts-integration-tests')

    integrationTestRuntimeOnly "org.assertj:assertj-core:${assertjVersion}"
    integrationTestRuntimeOnly "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    integrationTestRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
}

test {
    useJUnitPlatform()
}

task integrationTest(type: Test, group: "verification") {
    shouldRunAfter(test)

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath

    useJUnitPlatform()
    outputs.upToDateWhen { false }
}

apply from: "${rootProject.projectDir}/maven-publish.gradle"